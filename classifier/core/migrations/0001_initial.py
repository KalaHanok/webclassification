# Generated by Django 5.1.7 on 2025-04-01 19:10

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='WebCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Category name (e.g., 'Social Media', 'News')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of this category')),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly version of the name', max_length=110, unique=True)),
                ('is_system', models.BooleanField(default=False, help_text='Whether this is a system-created category')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Web Category',
                'verbose_name_plural': 'Web Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('device_id', models.CharField(max_length=36, unique=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('hashed_mac', models.CharField(blank=True, db_index=True, max_length=64, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(64)])),
                ('requires_device_auth', models.BooleanField(default=False, help_text='Whether this device requires hardware verification')),
                ('device_metadata', models.JSONField(blank=True, default=dict, help_text='Stores device characteristics for fingerprinting')),
                ('identifiers_rotated_at', models.DateTimeField(blank=True, null=True)),
                ('last_auth_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='UserAllowedCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission should automatically expire', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allowed_categories', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allowed_users', to='core.webcategory')),
            ],
            options={
                'verbose_name': 'User Allowed Category',
                'verbose_name_plural': 'User Allowed Categories',
                'ordering': ['user', 'category__name'],
            },
        ),
        migrations.CreateModel(
            name='BlockedDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, help_text='Blocked domain name', max_length=255)),
                ('blocked_at', models.DateTimeField(auto_now_add=True)),
                ('is_manual', models.BooleanField(default=False, help_text='Whether this was manually blocked by an admin')),
                ('notes', models.TextField(blank=True, help_text='Additional context about this block')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_domains', to=settings.AUTH_USER_MODEL)),
                ('original_category', models.ForeignKey(blank=True, help_text='Category that caused this block', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.webcategory')),
            ],
            options={
                'verbose_name': 'Blocked Domain',
                'verbose_name_plural': 'Blocked Domains',
                'ordering': ['-blocked_at'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['uuid'], name='core_user_uuid_f86e5b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['hashed_mac'], name='core_user_hashed__f3552b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userallowedcategory',
            unique_together={('user', 'category')},
        ),
        migrations.AddIndex(
            model_name='blockeddomain',
            index=models.Index(fields=['domain'], name='core_blocke_domain_89fda4_idx'),
        ),
        migrations.AddIndex(
            model_name='blockeddomain',
            index=models.Index(fields=['-blocked_at'], name='core_blocke_blocked_d60578_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blockeddomain',
            unique_together={('user', 'domain')},
        ),
    ]
